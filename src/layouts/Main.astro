---
import '@patternfly/patternfly/patternfly.css'
import '@patternfly/patternfly/patternfly-addons.css'
import '../styles/global.scss'
import { ClientRouter } from 'astro:transitions'

import Page from '../components/Page.astro'
import Masthead from '../components/Masthead.astro'
import Navigation from '../components/Navigation.astro'
---

<html lang="en" transition:animate="none">
  <head>
    <script>
      // Set theme before any content renders
      try {
        const themePreference = localStorage.getItem('theme-preference')
        if (themePreference === 'dark') {
          document.documentElement.classList.add('pf-v6-theme-dark')
        }
      } catch (e) {
        /* eslint-disable-next-line no-console */
        console.error('Failed to set initial theme:', e)
      }
    </script>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
    <ClientRouter />
  </head>
  <body>
    <Page>
      <Masthead slot="masthead" />
      <Navigation slot="sidebar" />
      <slot />
    </Page>
  </body>
</html>

<script>
  const updateTheme = (themePreference: string) => {
    requestAnimationFrame(() => {
      document.documentElement.classList.toggle(
        'pf-v6-theme-dark',
        themePreference === 'dark',
      )
    })
  }

  document.addEventListener('astro:before-swap', () => {
    const themePreference = localStorage.getItem('theme-preference')
    updateTheme(themePreference || 'light')
  })

  const scrollToHash = (hash: string) => {
    const targetElement = document.querySelector(hash)
    if (targetElement) {
      targetElement.scrollIntoView({ behavior: 'smooth' })
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (window.location.hash) {
      const hash = window.location.hash

      // Without this, page would focus on anchor link without scrolling to it
      history.replaceState(null, '', ' ')

      setTimeout(() => {
        scrollToHash(hash)
        history.replaceState(null, '', hash)
      }, 500)
    }
  })

  // Handle changes that happen after the initial page load
  window.addEventListener('hashchange', () => {
    if (window.location.hash) {
      scrollToHash(window.location.hash)
    }
  })
</script>
